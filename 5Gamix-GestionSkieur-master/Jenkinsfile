pipeline {
    agent any
    environment {
        SONARQUBE_ENV = 'SonarQube'  // SonarQube environment name
        NEXUS_CREDENTIALS_ID = 'deploymentRepo'  // Nexus credentials ID in Jenkins
        DOCKER_CREDENTIALS = credentials('docker-hub-credentials')
        RELEASE_VERSION = "1.0"
        registry = "scar535/gestion-station-ski"
        registryCredential = 'docker-hub-credentials'
        IMAGE_TAG = "${RELEASE_VERSION}-${env.BUILD_NUMBER}"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'SamiGuezmir',
                    url: 'https://github.com/3ammarllii/5Gamix-GestionSkieur.git'
            }
        }
        stage('Clean') {
            steps {
                echo 'Cleaning the workspace...'
                dir('5Gamix-GestionSkieur-master') {
                    sh 'mvn clean'
                }
                echo 'Clean completed.'
            }
        }
        stage('Test') {
                    steps {
                     dir('5Gamix-GestionSkieur-master') {
                        sh 'mvn test'
                        }
                    }
                }
                stage('Package') {
                                    steps {
                                        echo 'Packaging Stage...'
                                        dir('5Gamix-GestionSkieur-master') {
                                            sh 'mvn package'
                                        }
                                        echo 'Package completed.'
                                    }
                                }
        stage('Build') {
            steps {
                dir('5Gamix-GestionSkieur-master') {
                    sh 'mvn install -Dmaven.test.skip=true'
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {

                echo 'Starting SonarQube Analysis...'

                withSonarQubeEnv(SONARQUBE_ENV) {
                    echo 'Running SonarQube analysis...'
                    dir('5Gamix-GestionSkieur-master') {
                                        sh 'mvn sonar:sonar -Dsonar.projectKey=sonar'
                                    }

                }
                echo 'SonarQube analysis completed.'
            }
        }
        stage('Deploy to Nexus') {
                    steps {
                        echo 'Deploying to Nexus...'
                        dir('5Gamix-GestionSkieur-master') {
       sh "mvn deploy -Dmaven.test.skip=true -DaltDeploymentRepository=deploymentRepo::default::http://192.168.33.10:8081/repository/SamiGuezmir5Gamix/"
                                                            }
                        echo 'Deployment to Nexus completed.'
                    }
                }

                stage('Build Docker Image') {
                            steps {
                                script {
                                    echo 'Building Docker image...'
                                    dir('5Gamix-GestionSkieur-master') {
                                    sh "docker build -t ${registry}:${IMAGE_TAG} ."
                                    }
                                }
                            }
                        }


                       stage('Login to Docker') {
                           steps {
                               echo 'Logging to DockerHub...'
                               script {
                                   withCredentials([usernamePassword(credentialsId: 'docker-hub-credentials', usernameVariable: 'DOCKER_USERNAME', passwordVariable: 'DOCKER_PASSWORD')]) {
                                   dir('5Gamix-GestionSkieur-master') {
                                       sh "docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD"
                                       }
                                       echo 'DockerHub login successful.'
                                   }
                               }
                               echo 'Login to DockerHub stage completed.'
                           }
                       }

                       stage('Push to DockerHub') {
                                   steps {
                                       script {
                                           echo 'Pushing Docker image to Docker Hub...'
                                           dir('5Gamix-GestionSkieur-master') {
                                           sh "docker push ${registry}:${IMAGE_TAG}"
                                           }
                                       }
                                   }
                               }
                               stage('Deploy with Docker Compose') {
                                           steps {
                                               echo 'Docker Compose Deployment...'
                                               script {
                                                   echo 'Stopping existing containers...'
                                                   dir('5Gamix-GestionSkieur-master') {
                                                   sh 'docker compose down || true'
                                                   }

                                                   echo 'Starting containers...'
                                                   dir('5Gamix-GestionSkieur-master') {
                                                   sh 'docker compose up -d'
                                                   }

                                                   echo 'Waiting for services to initialize...'
                                                   dir('5Gamix-GestionSkieur-master') {
                                                   sh 'sleep 30'
                                                   }

                                                   echo 'Verifying deployment status...'
                                                   dir('5Gamix-GestionSkieur-master') {
                                                   sh 'docker compose ps'
                                                   }
                                               }
                                               echo 'Deploy with Docker Compose stage completed.'
                                           }
                                       }

    }
    post {
        success {
            echo 'Build finished successfully!'
        }
        failure {
            echo 'Build failed!'
        }
    }
}
